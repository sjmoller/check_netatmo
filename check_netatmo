#!/usr/bin/perl
#
# Netatmo Weatherstation healthcheck monitoring plugin
# Version 0.3
#
# 1) Create your client_id and client_secret at https://dev.netatmo.com.
#
# 2) Place this JSON data in /usr/local/etc/netatmo.conf:
# {
#   "client_id" : "your-client_id-here",
#   "client_secret" : "your-client_secret-here",
#   "username" : "your-netatmo-username-here",
#   "password" : "your-netatmo-password-here"
# }
#
# 3) See your data arrive in $HOME/var/netatmo. $HOME is the home of the user running this plugin.
#
# 180822: 0.1: Intial version
# 180822: 0.2: Use Nagios::Plugin to parse arguments. All values can now be tested.
# 181124: 0.3: Use Monitoring::Plugin instead of Nagios.
#              Can now be used with Check_MK as well (-L option).
# 181126: 0.4: When trouble, do not exit with UNKNOWN. Let monitor system decide when data is too old.
# 200119: 0.5: Use Netatmo module to fetch data.
#
# Soren Juul Moller, Aug 2018

use strict;
use warnings;
use Monitoring::Plugin;
use Fcntl qw(:flock);
use File::Path qw(make_path);
use Sys::Syslog;
use lib '.';
use Netatmo;
use JSON;
use DateTime::Format::DateParse;
use lib qw(/opt/plugins /usr/lib/nagios/plugins);
use utils qw($TIMEOUT);

my $PROGNAME = "check_netatmo";
my $VERSION = "0.5";
my $CONFFILE = '/usr/local/etc/netatmo.conf';

##############################################################################

my $np = Monitoring::Plugin->new(
	usage => 'Usage: %s -d device-id [-M module-name] -a attr [-L label -w INT:INT -c INT:INT -T -e equal-str -n not-equal-str -p perfdata -m message-template -v]',
	version => $VERSION,
	blurb => 'Netatmo check',
	extra => "Examples:\n" .
		 "   $PROGNAME -d device-id -a '{dashboard_data}->{Temperature}' -w28: -c32: -p '28:32:28:32'    (Indoor temperature)\n" .
		 "   $PROGNAME -d device-id -M Outdoor -a '{last_seen}' -T -w:3600 -c:7200 -m 'Outdoor seen %t ago'   (Outdoor timestamp)\n" .
		 "   $PROGNAME -d device-id -M 'Wind Gauge' -a '{dashboard_data}->{WindAngle}' -w\@220:280 -c\@280:330  (wind angle)\n".
		 "   $PROGNAME -d device-id -a '{status}' -e ok\n" .
		 "device-id is the Indoor module MAC address\n".
		 "See also https://nagios-plugins.org/doc/guidelines.html#THRESHOLDFORMAT",
	url => 'https://github.com/sjmoller/check_netatmo',
	plugin => $PROGNAME,
	timeout => 15,
	shortname => 'Netatmo'
);
$np->add_arg(
	spec => 'deviceid|d=s',
	help => '-d, --deviceid mac-address',
	required => 1
);
$np->add_arg(
	spec => 'module|M=s',
	help => '-M, --module module-name'
);
$np->add_arg(
	spec => 'attribute|a=s',
	help => "-a, --attribute {attr}->{attr}",
	required => 1
);
$np->add_arg(
	spec => 'label|L=s',
	help => "-L, --label check_mk_service_label"
);
$np->add_arg(
	spec => 'warning|w=s',
	help => '-w, --warning INT:INT',
);
$np->add_arg(
	spec => 'critical|c=s',
	help => '-c, --critical INT:INT',
);
$np->add_arg(
	spec => 'timestamp|T',
	help => "-T, --timestamp\n" .
		"   value is an epoch. Compare to epoch now (diff in seconds)"
);
$np->add_arg(
	spec => 'equal|e=s',
	help => '-e, --equals str' .
		"\n   critical if not equal"
);
$np->add_arg(
	spec => 'notequal|n=s',
	help => '-n, --notequals str' .
		"\n   critical if equal"
);
$np->add_arg(
	spec => 'perfdata|p:s',
	help => "-p, --perfdata [thresholds]\n" .
		"   Performance data format: name=value[:warnlevel[:critlevel[:min[:max]]]]".
		"   Format defaults to \"label=value\"\n" .
		"   thresholds:  warn[;crit[;min[;max]]] - example: -p '25:50:25:50'"
);
$np->add_arg(
	spec => 'message|m=s',
	help => "-m, --message message-template\n" .
		"   Format: 'Value %a is %v' or 'device seen %t ago'\n" .
		"   where %a is attribute name, %v is value and %t is duration"
);
$np->add_arg(
	spec => 'version|v',
	help => "-v, --version\n" .
		"  Show version"
);
$np->getopts;

##############################################################################

my $LOCK;

sub prettytime($) {
  my $secs = shift;
  my ($ss,$mi,$hh,$dd,$mm,$yy,@rest) = gmtime($secs);
  $dd--;
  return "${dd}d ${hh}h ${mi}m" if $dd > 0;
  return "${hh}h ${mi}m ${ss}s" if $hh > 0;
  return "${mi}m ${ss}s" if $mi > 0;
  return "${ss}s";
}

sub exit_state($$;$) {
  my ($state, $txt, $perfdata) = @_;
  flock($LOCK, LOCK_UN) if defined $LOCK;
  if ($np->opts->label) {
    # Output in Check_MK plugin format
    $perfdata = "-" unless defined $perfdata;
    print $state, " ", $np->opts->label, " ", $perfdata, " ", $txt, "\n";
  } else {
    # Otherwise output in Naemon/Nagios/Icinga and compatible format
    $txt .= "|$perfdata" if defined $perfdata;
    print qw(OK WARNING CRITICAL UNKNOWN)[$state] . " - $txt\n";
  }
  closelog();
  exit $state;
}

sub exit_error($) {
  my $txt = shift;
  syslog('err', $txt);
  exit_state(UNKNOWN, $txt);
}

##############################################################################

openlog('check_netatmo', 'nofatal', 'local0');

# Just in case of problems, let's not hang monitoring engine.
$SIG{'ALRM'} = sub {
  syslog('err', "No response from API (timeout)");
};
alarm($TIMEOUT);

# Exclusive access to getstationdata needed
open($LOCK, '<', $CONFFILE) || exit_error("Cannot open $CONFFILE");
flock($LOCK, LOCK_EX) || exit_error("Cannot lock $CONFFILE");

my $na = NetatmoConnection->new(conffile => $CONFFILE);
my $data = $na->getWeatherStation;

# Release lock
flock($LOCK, LOCK_UN);
close($LOCK);
undef $LOCK;

alarm(0);

my $dev = $data->deviceByID($np->opts->deviceid);
exit_error("Device ".$np->opts->deviceid." not found") unless defined $dev;
$dev->{status} = $data->{status};

if ($np->opts->module) {
  $dev = $dev->moduleByName($np->opts->module);
  exit_error("Module ".$np->opts->module." not found") unless defined $dev;
}

my $attr = $np->opts->attribute;

# remove dangerous characters before eval
$attr =~ tr/;()|\`\'\"\\/_/;

my $val;
eval '$val = $dev->'.$attr;
exit_error("$attr not found") unless defined $val;

my $state = OK;
if ($np->opts->equal) {
  $state = CRITICAL if $val ne $np->opts->equal;
}
elsif ($np->opts->notequal) {
  $state = CRITICAL if $val eq $np->opts->notequal;
}
elsif ($np->opts->timestamp) {
  my $delta = DateTime->now()->epoch() - $val;
  $state = $np->check_threshold(
	check => $delta,
	warning => $np->opts->warning,
	critical => $np->opts->critical
  );
  $val = $delta;
}
else {
  $state = $np->check_threshold(
	check => $val,
	warning => $np->opts->warning,
	critical => $np->opts->critical,
  );
}

$attr =~ s/.*{([a-z0-9_]+)}$/$1/i;
my $str = "$attr $val";

if ($np->opts->message) {
  # Template specified. Use that instead.
  $str = $np->opts->message;
  $str =~ s/%a/$attr/g;
  $str =~ s/%v/$val/g;
  my $t = prettytime($val);
  $str =~ s/%t/$t/g;
}

# Add perfdata if requested
my $perfdata;
if (my $p = $np->opts->perfdata) {
  $perfdata = "$attr=$val";
  if (length($p) > 0) {
    $p =~ tr/:/;/;
    $perfdata .= ";$p";
  }
}

exit_state($state, $str, $perfdata);
